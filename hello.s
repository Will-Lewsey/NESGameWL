;
; File generated by cc65 v 2.19 - Git 96e8e89
;
	.fopt		compiler,"cc65 v 2.19 - Git 96e8e89"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_spr
	.import		_pad_poll
	.import		_bank_spr
	.import		_rand8
	.import		_set_rand
	.import		_vram_adr
	.import		_vram_put
	.import		_check_collision
	.export		_pad
	.export		_collision1
	.export		_collision2
	.export		_collision3
	.export		_collision4
	.export		_collision5
	.export		_bottomCollision
	.export		_topCollision
	.export		_player
	.export		_xpos1
	.export		_xpos2
	.export		_xpos3
	.export		_xpos4
	.export		_xpos5
	.export		_reset
	.export		_score
	.export		_end
	.export		_speed
	.export		_box1
	.export		_box2
	.export		_box3
	.export		_box4
	.export		_box5
	.export		_bottomBox
	.export		_topBox
	.export		_i
	.export		_j
	.export		_seed
	.export		_palette_bg
	.export		_palette_sp
	.export		_main

.segment	"DATA"

_player:
	.byte	$80
	.byte	$00
	.byte	$06
	.byte	$08
_reset:
	.word	$0001
_score:
	.word	$0000
_end:
	.word	$0000
_speed:
	.word	$0001
_box1:
	.byte	$80
	.byte	$24
	.byte	$08
	.byte	$08
_box2:
	.byte	$80
	.byte	$48
	.byte	$08
	.byte	$08
_box3:
	.byte	$80
	.byte	$6C
	.byte	$08
	.byte	$08
_box4:
	.byte	$80
	.byte	$90
	.byte	$08
	.byte	$08
_box5:
	.byte	$80
	.byte	$B4
	.byte	$08
	.byte	$08
_bottomBox:
	.byte	$00
	.byte	$DC
	.byte	$FA
	.byte	$01
_topBox:
	.byte	$00
	.byte	$0A
	.byte	$FA
	.byte	$01
_seed:
	.word	$3039

.segment	"RODATA"

_palette_bg:
	.byte	$0F
	.byte	$05
	.byte	$16
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_palette_sp:
	.byte	$0F
	.byte	$05
	.byte	$0F
	.byte	$27
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00

.segment	"BSS"

.segment	"ZEROPAGE"
_pad:
	.res	1,$00
_collision1:
	.res	1,$00
_collision2:
	.res	1,$00
_collision3:
	.res	1,$00
_collision4:
	.res	1,$00
_collision5:
	.res	1,$00
_bottomCollision:
	.res	1,$00
_topCollision:
	.res	1,$00
_xpos1:
	.res	2,$00
_xpos2:
	.res	2,$00
_xpos3:
	.res	2,$00
_xpos4:
	.res	2,$00
_xpos5:
	.res	2,$00
_i:
	.res	1,$00
_j:
	.res	1,$00

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off(); // screen off
;
	jsr     _ppu_off
;
; pal_bg(palette_bg);
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; while(!pad_poll(0)) {
;
	lda     #$00
L0033:	jsr     _pad_poll
	tax
	beq     L0033
;
; pal_bg(palette_bg); 
;
	lda     #<(_palette_bg)
	ldx     #>(_palette_bg)
	jsr     _pal_bg
;
; pal_spr(palette_sp);
;
	lda     #<(_palette_sp)
	ldx     #>(_palette_sp)
	jsr     _pal_spr
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; vram_adr(NTADR_A(0,0)); // screen is 32 x 30 tiles
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; for(j = 0; j < 30; j++){
;
	lda     #$00
	sta     _j
L0034:	lda     _j
	cmp     #$1E
	bcs     L0006
;
; for(i = 0; i < 32; i++){
;
	lda     #$00
	sta     _i
L0035:	lda     _i
	cmp     #$20
	bcs     L0036
;
; vram_put(i); 
;
	jsr     _vram_put
;
; for(i = 0; i < 32; i++){
;
	inc     _i
	jmp     L0035
;
; for(j = 0; j < 30; j++){
;
L0036:	inc     _j
	jmp     L0034
;
; ppu_on_all();
;
L0006:	jsr     _ppu_on_all
;
; set_rand(seed);
;
L000D:	lda     _seed
	ldx     _seed+1
	jsr     _set_rand
;
; xpos1 = 48 + rand8() * 152 / 255;
;
	jsr     _rand8
	jsr     pushax
	lda     #$98
	jsr     tosumula0
	jsr     pushax
	lda     #$FF
	jsr     tosdiva0
	clc
	adc     #$30
	bcc     L0010
	inx
L0010:	sta     _xpos1
	stx     _xpos1+1
;
; xpos2 = 48 + rand8() * 152 / 255;
;
	jsr     _rand8
	jsr     pushax
	lda     #$98
	jsr     tosumula0
	jsr     pushax
	lda     #$FF
	jsr     tosdiva0
	clc
	adc     #$30
	bcc     L0011
	inx
L0011:	sta     _xpos2
	stx     _xpos2+1
;
; xpos3 = 48 + rand8() * 152 / 255;
;
	jsr     _rand8
	jsr     pushax
	lda     #$98
	jsr     tosumula0
	jsr     pushax
	lda     #$FF
	jsr     tosdiva0
	clc
	adc     #$30
	bcc     L0012
	inx
L0012:	sta     _xpos3
	stx     _xpos3+1
;
; xpos4 = 48 + rand8() * 152 / 255;
;
	jsr     _rand8
	jsr     pushax
	lda     #$98
	jsr     tosumula0
	jsr     pushax
	lda     #$FF
	jsr     tosdiva0
	clc
	adc     #$30
	bcc     L0013
	inx
L0013:	sta     _xpos4
	stx     _xpos4+1
;
; xpos5 = 48 + rand8() * 152 / 255;
;
	jsr     _rand8
	jsr     pushax
	lda     #$98
	jsr     tosumula0
	jsr     pushax
	lda     #$FF
	jsr     tosdiva0
	clc
	adc     #$30
	bcc     L0014
	inx
L0014:	sta     _xpos5
	stx     _xpos5+1
;
; box1.x = xpos1;
;
	lda     _xpos1
	sta     _box1
;
; box2.x = xpos2;
;
	lda     _xpos2
	sta     _box2
;
; box3.x = xpos3;
;
	lda     _xpos3
	sta     _box3
;
; box4.x = xpos4;
;
	lda     _xpos4
	sta     _box4
;
; box5.x = xpos5;
;
	lda     _xpos5
	sta     _box5
;
; ppu_wait_nmi(); // wait till beginning of the frame
;
	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; pad = pad_poll(0);
;
	lda     #$00
	jsr     _pad_poll
	sta     _pad
;
; if (pad & PAD_LEFT) 
;
	and     #$02
	beq     L0037
;
; if (player.x > 48) player.x--;
;
	lda     _player
	cmp     #$31
	bcc     L0037
	dec     _player
;
; if (pad & PAD_RIGHT)
;
L0037:	lda     _pad
	and     #$01
	beq     L0018
;
; if (player.x < 200) player.x++;
;
	lda     _player
	cmp     #$C8
	bcs     L0018
	inc     _player
;
; oam_spr(player.x, player.y, 0, 0);
;
L0018:	jsr     decsp3
	lda     _player
	ldy     #$02
	sta     (sp),y
	lda     _player+1
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     _oam_spr
;
; oam_spr(box1.x, box1.y, 1, 0);
;
	jsr     decsp3
	lda     _box1
	ldy     #$02
	sta     (sp),y
	lda     _box1+1
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(box2.x, box2.y, 1, 0);
;
	jsr     decsp3
	lda     _box2
	ldy     #$02
	sta     (sp),y
	lda     _box2+1
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(box3.x, box3.y, 1, 0);
;
	jsr     decsp3
	lda     _box3
	ldy     #$02
	sta     (sp),y
	lda     _box3+1
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(box4.x, box4.y, 1, 0);
;
	jsr     decsp3
	lda     _box4
	ldy     #$02
	sta     (sp),y
	lda     _box4+1
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; oam_spr(box5.x, box5.y, 1, 0);
;
	jsr     decsp3
	lda     _box5
	ldy     #$02
	sta     (sp),y
	lda     _box5+1
	dey
	sta     (sp),y
	tya
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; collision1 = check_collision(&player, &box1);
;
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     #<(_box1)
	ldx     #>(_box1)
	jsr     _check_collision
	sta     _collision1
;
; collision2 = check_collision(&player, &box2);
;
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     #<(_box2)
	ldx     #>(_box2)
	jsr     _check_collision
	sta     _collision2
;
; collision3 = check_collision(&player, &box3);
;
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     #<(_box3)
	ldx     #>(_box3)
	jsr     _check_collision
	sta     _collision3
;
; collision4 = check_collision(&player, &box4);
;
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     #<(_box4)
	ldx     #>(_box4)
	jsr     _check_collision
	sta     _collision4
;
; collision5 = check_collision(&player, &box5);
;
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     #<(_box5)
	ldx     #>(_box5)
	jsr     _check_collision
	sta     _collision5
;
; bottomCollision = check_collision(&player, &bottomBox);
;
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     #<(_bottomBox)
	ldx     #>(_bottomBox)
	jsr     _check_collision
	sta     _bottomCollision
;
; topCollision = check_collision(&player, &topBox);
;
	lda     #<(_player)
	ldx     #>(_player)
	jsr     pushax
	lda     #<(_topBox)
	ldx     #>(_topBox)
	jsr     _check_collision
	sta     _topCollision
;
; player.y = player.y + speed;
;
	lda     _player+1
	clc
	adc     _speed
	sta     _player+1
;
; if ((collision1 + collision2 + collision3 + collision4 + collision5)) {
;
	ldx     #$00
	lda     _collision1
	clc
	adc     _collision2
	bcc     L002F
	inx
	clc
L002F:	adc     _collision3
	bcc     L0030
	inx
	clc
L0030:	adc     _collision4
	bcc     L0031
	inx
	clc
L0031:	adc     _collision5
	bcc     L002E
	inx
L002E:	stx     tmp1
	ora     tmp1
	beq     L0019
;
; score = 0;
;
	ldx     #$00
	txa
	sta     _score
	sta     _score+1
;
; speed = 1;
;
	lda     #$01
	sta     _speed
	stx     _speed+1
;
; if (bottomCollision) {
;
L0019:	lda     _bottomCollision
	beq     L001A
;
; seed++;
;
	inc     _seed
	bne     L001B
	inc     _seed+1
;
; score++;
;
L001B:	inc     _score
	bne     L001C
	inc     _score+1
;
; player.y = 0;
;
L001C:	lda     #$00
	sta     _player+1
;
; switch (score)
;
L001A:	lda     _score
	ldx     _score+1
;
; }
;
	cpx     #$00
	jne     L002A
	cmp     #$00
	beq     L001F
	cmp     #$01
	beq     L0020
	cmp     #$02
	beq     L0021
	cmp     #$03
	jeq     L0022
	cmp     #$04
	jeq     L0023
	cmp     #$05
	jeq     L0024
	cmp     #$06
	jeq     L0025
	cmp     #$07
	jeq     L0026
	cmp     #$08
	jeq     L0027
	cmp     #$09
	jeq     L0028
	cmp     #$0A
	jeq     L0029
	jmp     L002A
;
; oam_spr(0,0,0x0b,0);
;
L001F:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,2,0);
;
L0020:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$02
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,3,0);
;
L0021:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$03
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; speed = 2;
;
	ldx     #$00
	lda     #$02
	sta     _speed
	stx     _speed+1
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,4,0);
;
L0022:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$04
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,5,0);
;
L0023:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; speed = 3;
;
	ldx     #$00
	lda     #$03
	sta     _speed
	stx     _speed+1
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,6,0);
;
L0024:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$06
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,7,0);
;
L0025:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$07
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; speed = 4;
;
	ldx     #$00
	lda     #$04
	sta     _speed
	stx     _speed+1
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,8,0);
;
L0026:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,9,0);
;
L0027:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$09
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; speed = 5;
;
	ldx     #$00
	lda     #$05
	sta     _speed
	stx     _speed+1
;
; break;
;
	jmp     L000D
;
; oam_spr(0,0,0x0a,0);
;
L0028:	jsr     decsp3
	txa
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$0A
	dey
	sta     (sp),y
	txa
	jsr     _oam_spr
;
; break;
;
	jmp     L000D
;
; ppu_off();
;
L0029:	jsr     _ppu_off
;
; oam_spr(0,0,12,0);
;
L002A:	jsr     decsp3
	lda     #$00
	ldy     #$02
	sta     (sp),y
	dey
	sta     (sp),y
	lda     #$0C
	dey
	sta     (sp),y
	tya
	jsr     _oam_spr
;
; break;
;
	jmp     L000D

.endproc

